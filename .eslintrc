{
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": ["./tsconfig.eslint.json"],
        "ecmaVersion": 2020,
        "sourceType": "module"
    },
    "plugins": ["@typescript-eslint", "filenames", "jsdoc"],
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "prettier",
        "plugin:prettier/recommended"
    ],
    "rules": {
        "@typescript-eslint/adjacent-overload-signatures": ["error"],
        "@typescript-eslint/array-type": [
            "error",
            {
                "default": "array"
            }
        ],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": [
            "error",
            {
                "ts-expect-error": "allow-with-description",
                "ts-ignore": "allow-with-description",
                "ts-nocheck": "allow-with-description",
                "ts-check": false,
                "minimumDescriptionLength": 3
            }
        ],
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/class-literal-property-style": ["error", "fields"],
        "comma-dangle": "off",
        "@typescript-eslint/comma-dangle": [
            "error",
            {
                "arrays": "always-multiline",
                "objects": "always-multiline",
                "imports": "always-multiline",
                "exports": "always-multiline",
                "functions": "always-multiline",
                "enums": "always-multiline",
                "generics": "always-multiline",
                "tuples": "always-multiline"
            }
        ],
        "@typescript-eslint/comma-spacing": "error",
        "@typescript-eslint/consistent-indexed-object-style": ["error", "record"],
        "@typescript-eslint/consistent-type-assertions": [
            "error",
            {
                "assertionStyle": "as",
                "objectLiteralTypeAssertions": "allow-as-parameter"
            }
        ],
        "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
        "@typescript-eslint/consistent-type-exports": [
            "error",
            {
                "fixMixedExportsWithInlineTypeSpecifier": false
            }
        ],
        "@typescript-eslint/consistent-type-imports": [
            "error",
            {
                "prefer": "type-imports",
                "disallowTypeAnnotations": true
            }
        ],
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": "error",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": [
            "error",
            {
                "allowKeywords": true,
                "allowPrivateClassPropertyAccess": false,
                "allowProtectedClassPropertyAccess": false,
                "allowIndexSignaturePropertyAccess": true
            }
        ],
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-member-accessibility": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": ["error", "never"],
        "keyword-spacing": "off",
        "@typescript-eslint/keyword-spacing": ["error"],
        "lines-between-class-members": "off",
        "@typescript-eslint/lines-between-class-members": [
            "error",
            {
                "exceptAfterSingleLine": true
            }
        ],
        "@typescript-eslint/member-ordering": [
            "error",
            {
                "default": [
                    "static-field",
                    "field",
                    "public-static-method",
                    "constructor",
                    "method",
                    "protected-method",
                    "private-method"
                ]
            }
        ],
        "@typescript-eslint/method-signature-style": "error",
        "camelcase": "off",
        ////m:"x-metadata-@typescript-eslint/naming-convention": {"related": "camelcase"},
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "default",
                "format": ["strictCamelCase"],
                "filter": {
                    "match": false,
                    "regex": "^_|^iconURL$|^Content-Type$|^Authorization$|^baseURL$|^access_token$|^refresh_token$|^expires_in$|^token_type$|^client_id$|^client_secret$|^device_code$|^grant_type$|^_$"
                }
            },
            {
                "selector": "memberLike",
                "format": ["strictCamelCase"],
                "leadingUnderscore": "forbid",
                "filter": {
                    "match": false,
                    "regex": "^iconURL$|^Content-Type$|^Authorization$|^baseURL$|^access_token$|^refresh_token$|^expires_in$|^token_type$|^client_id$|^client_secret$|^device_code$|^grant_type$|^_$"
                }
            },
            {
                "selector": "memberLike",
                "modifiers": ["private"],
                "format": ["strictCamelCase"],
                "filter": {
                    "match": false,
                    "regex": "^iconURL$|^Content-Type$|^Authorization$|^baseURL$|^access_token$|^refresh_token$|^expires_in$|^token_type$|^client_id$|^client_secret$|^device_code$|^grant_type$|^_$"
                },
                "leadingUnderscore": "require"
            },
            {
                "selector": "variable",
                "format": ["strictCamelCase"],
                "filter": {
                    "match": false,
                    "regex": "^_|"
                }
            },
            {
                "selector": "variable",
                "modifiers": ["const", "global"],
                "format": ["UPPER_CASE"]
            },
            {
                "selector": "function",
                "format": ["strictCamelCase"],
                "leadingUnderscore": "allow"
            },
            {
                "selector": "function",
                "modifiers": ["exported"],
                "format": ["strictCamelCase"],
                "leadingUnderscore": "forbid"
            },

            {
                "selector": "enumMember",
                "format": ["strictCamelCase", "PascalCase", "UPPER_CASE"]
            },
            {
                "selector": "typeLike",
                "format": ["PascalCase"]
            },
            {
                "selector": "interface",
                "format": ["PascalCase"]
            },
            {
                "selector": "class",
                "format": ["PascalCase"]
            }
        ],
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "no-dupe-class-members": "off",
        "@typescript-eslint/no-dupe-class-members": ["error"],
        "no-duplicate-imports": "off",
        "@typescript-eslint/no-duplicate-imports": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": [
            "error",
            {
                "allow": ["private-constructors", "protected-constructors", "decoratedFunctions"]
            }
        ],
        "@typescript-eslint/no-empty-interface": [
            "error",
            {
                "allowSingleExtends": true
            }
        ],
        "@typescript-eslint/no-explicit-any": "warn",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-implicit-any-catch": "error",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-inferrable-types": [
            "error",
            {
                "ignoreProperties": true,
                "ignoreParameters": true
            }
        ],
        "no-invalid-this": "off",
        "@typescript-eslint/no-invalid-this": ["error"],
        "@typescript-eslint/no-invalid-void-type": "error",
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": ["error"],
        "no-loss-of-precision": "off",
        "@typescript-eslint/no-loss-of-precision": ["error"],
        "@typescript-eslint/no-meaningless-void-operator": [
            "error",
            {
                "checkNever": true
            }
        ],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": ["error"],
        "@typescript-eslint/no-require-imports": "off",
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": [
            "error",
            {
                "ignoreTypeValueShadow": true
            }
        ],
        "@typescript-eslint/no-this-alias": [
            "error",
            {
                "allowDestructuring": true
            }
        ],
        "no-throw-literal": "off",
        "@typescript-eslint/no-throw-literal": [
            "error",
            {
                "allowThrowingAny": false,
                "allowThrowingUnknown": true
            }
        ],
        "@typescript-eslint/no-type-alias": [
            "error",
            {
                "allowAliases": "always",
                "allowGenerics": "always",
                "allowCallbacks": "always",
                "allowConditionalTypes": "always",
                "allowLiterals": "in-unions-and-intersections",
                "allowConstructors": "always"
            }
        ],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "error",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": ["error"],
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error", { "varsIgnorePattern": "^_", "argsIgnorePattern": "^_" }],
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["error"],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": ["error"],
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/prefer-ts-expect-error": "error",
        "@typescript-eslint/promise-function-async": [
            "error",
            {
                "allowAny": true
            }
        ],
        "require-await": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/restrict-template-expressions": "error",
        "no-return-await": "off",
        ///m:"x-metadata-@typescript-eslint/return-await": { "related": "no-return-await" },
        "@typescript-eslint/return-await": "error",
        "@typescript-eslint/sort-type-union-intersection-members": "error",
        "@typescript-eslint/strict-boolean-expressions": "warn",
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        "@typescript-eslint/triple-slash-reference": [
            "error",
            {
                "path": "never",
                "types": "never",
                "lib": "always"
            }
        ],
        "@typescript-eslint/typedef": "error",
        "@typescript-eslint/unbound-method": "error",
        "@typescript-eslint/unified-signatures": "error",
        "filenames/match-exported": ["error", ["camel"]],
        "jsdoc/check-alignment": "error",
        "jsdoc/check-tag-names": [
            "error",
            {
                "definedTags": ["inheritDoc", "expandParams", "hideProtected", "eventListener", "remarks", "internal"]
            }
        ],
        "jsdoc/newline-after-description": ["error", "always"],
        "arrow-body-style": ["error", "as-needed"],
        "arrow-parens": ["error", "as-needed"],
        "consistent-return": "error",
        "curly": ["error", "multi-or-nest"],
        "default-case": "error",
        "eol-last": ["error", "always"],
        "eqeqeq": [
            "error",
            "always",
            {
                "null": "ignore"
            }
        ],
        "guard-for-in": "error",
        "max-classes-per-file": ["error", 1],
        "newline-before-return": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-cond-assign": "error",
        "no-debugger": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-eval": "error",
        "no-ex-assign": "error",
        "no-fallthrough": [
            "error",
            {
                "commentPattern": "fallthrough"
            }
        ],
        "no-irregular-whitespace": "error",
        "no-labels": "error",
        "no-negated-condition": "error",
        "no-new": "error",
        "no-new-wrappers": "error",
        "no-param-reassign": "error",
        "no-prototype-builtins": "error",
        "no-restricted-syntax": [
            "error",
            {
                "selector": "SequenceExpression",
                "message": "The comma operator is confusing and a common mistake. Don’t use it!"
            }
        ],
        "no-sparse-arrays": "error",
        "no-trailing-spaces": "error",
        "no-unexpected-multiline": "error",
        "no-unneeded-ternary": "error",
        "no-unsafe-finally": "error",
        "no-var": "error",
        "prefer-arrow-callback": [
            "error",
            {
                "allowUnboundThis": false
            }
        ],
        "prefer-const": [
            "error",
            {
                "destructuring": "all",
                "ignoreReadBeforeAssign": true
            }
        ],
        "prefer-object-spread": "error",
        "prefer-rest-params": "error",
        "prefer-template": "error",
        "quotes": [
            "error",
            "double",
            {
                "avoidEscape": true
            }
        ],
        "radix": ["error", "always"],
        "spaced-comment": [
            "error",
            "always",
            {
                "markers": ["*", "/"]
            }
        ],
        "use-isnan": "error",
        "yoda": ["error", "never"]
    },
    "overrides": [
        {
            "files": ["*.ts", "*.tsx"],
            "rules": {
                "@typescript-eslint/explicit-function-return-type": [
                    "error",
                    {
                        "allowExpressions": true,
                        "allowTypedFunctionExpressions": true,
                        "allowHigherOrderFunctions": true,
                        "allowDirectConstAssertionInArrowFunctions": true,
                        "allowConciseArrowFunctionExpressionsStartingWithVoid": true
                    }
                ],
                "@typescript-eslint/explicit-member-accessibility": [
                    "error",
                    {
                        "accessibility": "no-public",
                        "overrides": {
                            "parameterProperties": "explicit"
                        }
                    }
                ],
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/explicit-module-boundary-types": ["error"],
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "warn",
                "@typescript-eslint/no-require-imports": "error",
                "@typescript-eslint/no-var-requires": "error"
            }
        },
        {
            "files": ["*.js", "*.jsx"],
            "rules": {
                "no-undef": "off",
                "@typescript-eslint/no-unsafe-return": "off",
                "@typescript-eslint/restrict-template-expressions": "off"
            }
        },
        {
            "files": ["*.test.ts", "*.spec.ts", "*.test.js", "*.spec.js"],
            "rules": {
                "@typescript-eslint/dot-notation": "off",
                "@typescript-eslint/naming-convention": "warn"
            }
        }
    ]
}
